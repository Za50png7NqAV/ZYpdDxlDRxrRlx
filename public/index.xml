<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Tools Portal</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Home on Tools Portal</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Mar 2023 11:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Post 3</title>
      <link>http://localhost:1313/posts/post-3/</link>
      <pubDate>Wed, 15 Mar 2023 11:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/post-3/</guid>
      <description>&lt;p&gt;Occaecat aliqua consequat laborum ut ex aute aliqua culpa quis irure esse magna dolore quis. Proident fugiat labore eu laboris officia Lorem enim. Ipsum occaecat cillum ut tempor id sint aliqua incididunt nisi incididunt reprehenderit. Voluptate ad minim sint est aute aliquip esse occaecat tempor officia qui sunt. Aute ex ipsum id ut in est velit est laborum incididunt. Aliqua qui id do esse sunt eiusmod id deserunt eu nostrud aute sit ipsum. Deserunt esse cillum Lorem non magna adipisicing mollit amet consequat.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Post 2</title>
      <link>http://localhost:1313/posts/post-2/</link>
      <pubDate>Wed, 15 Feb 2023 10:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/post-2/</guid>
      <description>&lt;p&gt;Anim eiusmod irure incididunt sint cupidatat. Incididunt irure irure irure nisi ipsum do ut quis fugiat consectetur proident cupidatat incididunt cillum. Dolore voluptate occaecat qui mollit laborum ullamco et. Ipsum laboris officia anim laboris culpa eiusmod ex magna ex cupidatat anim ipsum aute. Mollit aliquip occaecat qui sunt velit ut cupidatat reprehenderit enim sunt laborum. Velit veniam in officia nulla adipisicing ut duis officia.&lt;/p&gt;&#xA;&lt;p&gt;Exercitation voluptate irure in irure tempor mollit Lorem nostrud ad officia. Velit id fugiat occaecat do tempor. Sit officia Lorem aliquip eu deserunt consectetur. Aute proident deserunt in nulla aliquip dolore ipsum Lorem ut cupidatat consectetur sit sint laborum. Esse cupidatat sit sint sunt tempor exercitation deserunt. Labore dolor duis laborum est do nisi ut veniam dolor et nostrud nostrud.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Post 1</title>
      <link>http://localhost:1313/posts/post-1/</link>
      <pubDate>Sun, 15 Jan 2023 09:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/post-1/</guid>
      <description>&lt;p&gt;Tempor proident minim aliquip reprehenderit dolor et ad anim Lorem duis sint eiusmod. Labore ut ea duis dolor. Incididunt consectetur proident qui occaecat incididunt do nisi Lorem. Tempor do laborum elit laboris excepteur eiusmod do. Eiusmod nisi excepteur ut amet pariatur adipisicing Lorem.&lt;/p&gt;&#xA;&lt;p&gt;Occaecat nulla excepteur dolore excepteur duis eiusmod ullamco officia anim in voluptate ea occaecat officia. Cillum sint esse velit ea officia minim fugiat. Elit ea esse id aliquip pariatur cupidatat id duis minim incididunt ea ea. Anim ut duis sunt nisi. Culpa cillum sit voluptate voluptate eiusmod dolor. Enim nisi Lorem ipsum irure est excepteur voluptate eu in enim nisi. Nostrud ipsum Lorem anim sint labore consequat do.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/farmgen/admission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/farmgen/admission/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=&#34;UTF-8&#34; /&gt;&#xA;  &lt;title&gt;Admission toml Tools Generator&lt;/title&gt;&#xA;  &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34; /&gt;&#xA;  &lt;style&gt;&#xA;    * { box-sizing: border-box; }&#xA;    body {&#xA;      font-family: &#39;Segoe UI&#39;, sans-serif;&#xA;      background-color: #f2f4f8;&#xA;      padding: 30px 15px;&#xA;      margin: 0;&#xA;    }&#xA;    h2, h3 { color: #333; }&#xA;    .container {&#xA;      max-width: 600px;&#xA;      margin: auto;&#xA;      background: white;&#xA;      padding: 25px;&#xA;      border-radius: 10px;&#xA;      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);&#xA;    }&#xA;    label { font-weight: 600; margin-top: 10px; display: block; }&#xA;    select, textarea, button {&#xA;      width: 100%;&#xA;      padding: 10px;&#xA;      margin-top: 10px;&#xA;      font-size: 16px;&#xA;      border-radius: 6px;&#xA;      border: 1px solid #ccc;&#xA;    }&#xA;    select:focus, textarea:focus {&#xA;      border-color: #1a73e8;&#xA;      outline: none;&#xA;    }&#xA;    button {&#xA;      background-color: #08036a;&#xA;      color: white;&#xA;      font-weight: bold;&#xA;      cursor: pointer;&#xA;      transition: background 0.3s;&#xA;    }&#xA;    button:hover { opacity: 0.8; }&#xA;    .delbtn { width:20px; }&#xA;    .entry {&#xA;      background-color: #f9f9f9;&#xA;      padding: 15px;&#xA;      border-radius: 8px;&#xA;      margin-top: 15px;&#xA;      position: relative;&#xA;      border-left: 4px solid #1a73e8;&#xA;    }&#xA;    .entry strong { color: #1a73e8; }&#xA;    .entry button {&#xA;      position: absolute;&#xA;      top: 10px;&#xA;      right: 10px;&#xA;      padding: 4px 10px;&#xA;      background: #e53935;&#xA;      border: none;&#xA;      border-radius: 4px;&#xA;      font-size: 12px;&#xA;      cursor: pointer;&#xA;    }&#xA;    .button-row {&#xA;      display: flex;&#xA;      gap: 10px;&#xA;      margin-top: 10px;&#xA;    }&#xA;    .button-row button {&#xA;      padding: 6px 12px;&#xA;      font-size: 14px;&#xA;      border-radius: 6px;&#xA;      border: none;&#xA;      background-color: red;&#xA;      color: white;&#xA;      cursor: pointer;&#xA;      transition: background-color 0.2s ease;&#xA;    }&#xA;    .button-row button:nth-child(2) { background-color: green; }&#xA;    .output-box {&#xA;      background: #f1f1f1;&#xA;      padding: 15px;&#xA;      margin-top: 15px;&#xA;      border-radius: 8px;&#xA;      white-space: pre-wrap;&#xA;      font-family: monospace;&#xA;      color: #333;&#xA;    }&#xA;    .hidden { display: none; }&#xA;    @media (max-width: 600px) {&#xA;      .container { padding: 20px 15px; }&#xA;    }&#xA;  &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;  &lt;div class=&#34;container&#34;&gt;&#xA;    &lt;h2&gt;YP Admission Toml Tools&lt;/h2&gt;&#xA;&#xA;    &lt;label for=&#34;typeSelector&#34;&gt;Select Type&lt;/label&gt;&#xA;    &lt;select id=&#34;typeSelector&#34;&gt;&lt;/select&gt;&#xA;&#xA;    &lt;div id=&#34;formArea&#34; class=&#34;hidden&#34;&gt;&#xA;      &lt;label id=&#34;selectedLabel&#34;&gt;&lt;/label&gt;&#xA;      &lt;textarea id=&#34;inputText&#34; rows=&#34;4&#34; placeholder=&#34;Enter details here...&#34;&gt;&lt;/textarea&gt;&#xA;      &lt;div class=&#34;button-row&#34;&gt;&#xA;        &lt;button onclick=&#34;clearTextarea()&#34;&gt;Clear&lt;/button&gt;&#xA;        &lt;button onclick=&#34;addEntry()&#34;&gt;+Add&lt;/button&gt;&#xA;      &lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &lt;h3&gt;Added Entries&lt;/h3&gt;&#xA;    &lt;div id=&#34;entriesContainer&#34;&gt;&lt;/div&gt;&#xA;&#xA;    &lt;div class=&#34;button-row&#34;&gt;&#xA;      &lt;button onclick=&#34;deleteAllEntries()&#34;&gt;üóë Delete All&lt;/button&gt;&#xA;      &lt;button onclick=&#34;generateOutput()&#34;&gt;‚úÖ Generate&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &lt;div id=&#34;outputSection&#34; class=&#34;hidden&#34;&gt;&#xA;      &lt;h3&gt;Output&lt;/h3&gt;&#xA;      &lt;div id=&#34;outputBox&#34; class=&#34;output-box&#34;&gt;&lt;/div&gt;&#xA;      &lt;button onclick=&#34;copyOutput()&#34;&gt;Copy&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;script&gt;&#xA;    const STORAGE_KEY = &#34;yp_admission_entries&#34;;&#xA;    const typeSelector = document.getElementById(&#34;typeSelector&#34;);&#xA;    const formArea = document.getElementById(&#34;formArea&#34;);&#xA;    const selectedLabel = document.getElementById(&#34;selectedLabel&#34;);&#xA;    const inputText = document.getElementById(&#34;inputText&#34;);&#xA;    const entriesContainer = document.getElementById(&#34;entriesContainer&#34;);&#xA;    const outputBox = document.getElementById(&#34;outputBox&#34;);&#xA;    const outputSection = document.getElementById(&#34;outputSection&#34;);&#xA;&#xA;    const allOptions = [&#xA;      &#34;type&#34;, &#34;post-type&#34;,&#34;title&#34;, &#34;AdmissionName&#34;,  &#34;PostName&#34;, &#34;seo_title&#34;, &#34;Department&#34;, &#34;OfficialSource&#34;, &#34;description&#34;, &#34;State&#34;, &#34;category&#34;, &#34;Notification&#34;,  &#34;begindate&#34;, &#34;lastdate&#34;, &#34;admitcardName&#34;, &#34;ResultName&#34;,  &#34;eligibility&#34;, &#34;Domicile&#34;, &#34;imageBanner&#34;, &#34;summary&#34;, &#34;cssStyles&#34;, &#34;impdates&#34;,&#34;applyfees&#34;, &#34;qualification&#34;, &#34;how_to&#34;, &#34;documents&#34;, &#34;keywords&#34;,   &#34;age_limit&#34;,&#34;shortinfo&#34;, &#34;InnerPost&#34;, &#34;faqs&#34;, &#34;from_date&#34;, &#34;to_date&#34;, &#34;notificationdate&#34;, &#34;pdfName&#34; &#xA;    ];&#xA;&#xA;    const defaultTexts = {&#xA;      type: &#34;admission&#34;,&#xA;      category: &#34;Admission&#34;,&#xA;      OfficialSource: &#34;https://yojnaportal.com/&#34;,&#xA;      cssStyles: &#34;css/posts/admission.css&#34;,&#xA;      InnerPost: &#34; ‡§Ü‡§µ‡§¶‡•á‡§® ‡•§ ‡§§‡§ø‡§•‡§ø‡§Ø‡§æ | ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡•§ ‡§Æ‡§π‡§§‡•ç‡§§‡§™‡•Ç‡§∞‡•ç‡§£ ‡§≤‡§ø‡§Ç‡§ï&#34;,&#xA;      how_to: `‡§Ü‡§ß‡§ø‡§ï‡§æ‡§∞‡§ø‡§ï ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç:&#xA;      Candidate Online Form ‡§∏‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§è‡§Ç :&#xA;      ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§® ‡§ï‡§∞‡•á‡§Ç:&#xA;      ‡§Ü‡§µ‡•á‡§¶‡§® ‡§´‡•â‡§∞‡•ç‡§Æ ‡§≠‡§∞‡•á‡§Ç:&#xA;      ‡§´‡•Ä‡§∏ ‡§ï‡§æ ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç:&#xA;      ‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡§§‡•ç‡§∞ ‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§ï‡§∞‡•á‡§Ç:` ,&#xA;     documents: `‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§£‡§ø‡§ï ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ&#xA;     ‡§Ü‡§Ø‡•Å ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§É 10‡§µ‡•Ä‡§Ç ‡§Ö‡§ï‡§∏‡•Ç‡§ö‡•Ä&#xA;     ‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°&#xA;     ‡§´‡•ã‡§ü‡•ã ‡§è‡§µ‡§Ç ‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞&#xA;     ‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§Ü‡§à ‡§°‡•Ä&#xA;     ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§è‡§µ‡§Ç ‡§à‡§Æ‡•á‡§≤ ‡§Ü‡§à ‡§°‡•Ä&#xA;     ‡§´‡•ã‡§ü‡•ã ‡§è‡§µ‡§Ç ‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞`,&#xA;       age_limit: `&#xA;       ‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§Ü‡§Ø‡•Å‡§É&#xA;       ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§Ü‡§Ø‡•Å‡§É`&#xA;    };&#xA;&#xA;    let entries = [];&#xA;&#xA;    window.onload = () =&gt; {&#xA;      loadEntriesFromStorage();&#xA;      populateDropdown();&#xA;    };&#xA;&#xA;    function populateDropdown() {&#xA;      typeSelector.innerHTML = &#34;&#34;;&#xA;      const available = allOptions.filter(opt =&gt; !entries.find(e =&gt; e.type === opt));&#xA;      available.forEach(opt =&gt; {&#xA;        const option = document.createElement(&#34;option&#34;);&#xA;        option.value = opt;&#xA;        option.textContent = opt;&#xA;        typeSelector.appendChild(option);&#xA;      });&#xA;      if (available.length &gt; 0) {&#xA;        typeSelector.selectedIndex = 0;&#xA;        showForm();&#xA;      } else {&#xA;        formArea.classList.add(&#34;hidden&#34;);&#xA;      }&#xA;    }&#xA;&#xA;    function showForm() {&#xA;      const selected = typeSelector.value;&#xA;      selectedLabel.textContent = &#34;Selected: &#34; + selected;&#xA;      inputText.value = defaultTexts[selected] || &#34;&#34;;&#xA;      formArea.classList.remove(&#34;hidden&#34;);&#xA;    }&#xA;&#xA;    typeSelector.addEventListener(&#34;change&#34;, showForm);&#xA;&#xA;    function addEntry() {&#xA;      const type = typeSelector.value;&#xA;      const text = inputText.value.trim();&#xA;      if (!text) return alert(&#34;Please enter some text.&#34;);&#xA;      if (!type) return alert(&#34;Please select a type.&#34;);&#xA;      entries.push({ type, text });&#xA;      saveEntriesToStorage();&#xA;&#xA;      const entryDiv = document.createElement(&#34;div&#34;);&#xA;      entryDiv.className = &#34;entry&#34;;&#xA;      entryDiv.innerHTML = `&#xA;        &lt;strong&gt;${type}&lt;/strong&gt; = &#34;${text}&#34;&#xA;        &lt;button class=&#34;delbtn&#34; onclick=&#34;deleteEntry(this, &#39;${type}&#39;)&#34;&gt;X&lt;/button&gt;&#xA;      `;&#xA;      entriesContainer.appendChild(entryDiv);&#xA;      populateDropdown();&#xA;    }&#xA;&#xA;    function deleteEntry(btn, type) {&#xA;      entries = entries.filter(e =&gt; e.type !== type);&#xA;      saveEntriesToStorage();&#xA;      btn.parentElement.remove();&#xA;      populateDropdown();&#xA;    }&#xA;&#xA;    function deleteAllEntries() {&#xA;      if (confirm(&#34;Are you sure you want to delete all entries?&#34;)) {&#xA;        entries = [];&#xA;        localStorage.removeItem(STORAGE_KEY);&#xA;        entriesContainer.innerHTML = &#34;&#34;;&#xA;        populateDropdown();&#xA;        outputSection.classList.add(&#34;hidden&#34;);&#xA;      }&#xA;    }&#xA;&#xA;    function generateOutput() {&#xA;      if (entries.length === 0) return alert(&#34;No entries added.&#34;);&#xA;      const forceArrayTypes = [&#34;impdates&#34;, &#34;cssstyles&#34;, &#34;age_limit&#34;, &#34;importantdates&#34;, &#34;applyfees&#34;, &#34;qualification&#34;, &#34;keywords&#34;, &#34;how_to&#34;, &#34;faqs&#34;, &#34;documents&#34;, &#34;shortinfo&#34;];&#xA;      let result = entries.map(entry =&gt; {&#xA;        const { type, text } = entry;&#xA;        const typeKey = type.toLowerCase();&#xA;        const isForceArray = forceArrayTypes.includes(typeKey);&#xA;        const isMultiLine = isForceArray || text.includes(&#34;\n&#34;) || text.trim() === &#34;///&#34;;&#xA;        if (isMultiLine) {&#xA;          const lines = text&#xA;            .split(&#34;\n&#34;)&#xA;            .map(line =&gt; line.trim())&#xA;            .filter(line =&gt; line !== &#34;&#34;)&#xA;            .map(line =&gt; `&#34;${line}&#34;`);&#xA;          return `${type} = [\n  ${lines.join(&#34;,\n  &#34;)}\n]`;&#xA;        } else {&#xA;          return `${type} = &#34;${text}&#34;`;&#xA;        }&#xA;      }).join(&#34;\n\n&#34;);&#xA;      outputBox.textContent = result;&#xA;      outputSection.classList.remove(&#34;hidden&#34;);&#xA;    }&#xA;&#xA;    function copyOutput() {&#xA;      navigator.clipboard.writeText(outputBox.textContent).then(() =&gt; {&#xA;        alert(&#34;Copied to clipboard!&#34;);&#xA;      });&#xA;    }&#xA;&#xA;    function clearTextarea() {&#xA;      inputText.value = &#34;&#34;;&#xA;    }&#xA;&#xA;    function saveEntriesToStorage() {&#xA;      localStorage.setItem(STORAGE_KEY, JSON.stringify(entries));&#xA;    }&#xA;&#xA;    function loadEntriesFromStorage() {&#xA;      const saved = localStorage.getItem(STORAGE_KEY);&#xA;      if (saved) {&#xA;        entries = JSON.parse(saved);&#xA;        entries.forEach(({ type, text }) =&gt; {&#xA;          const entryDiv = document.createElement(&#34;div&#34;);&#xA;          entryDiv.className = &#34;entry&#34;;&#xA;          entryDiv.innerHTML = `&#xA;            &lt;strong&gt;${type}&lt;/strong&gt; = &#34;${text}&#34;&#xA;            &lt;button class=&#34;delbtn&#34; onclick=&#34;deleteEntry(this, &#39;${type}&#39;)&#34;&gt;X&lt;/button&gt;&#xA;          `;&#xA;          entriesContainer.appendChild(entryDiv);&#xA;        });&#xA;      }&#xA;    }&#xA;  &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/farmgen/recruitment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/farmgen/recruitment/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=&#34;UTF-8&#34; /&gt;&#xA;  &lt;title&gt;Admission toml Tools Generator&lt;/title&gt;&#xA;  &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34; /&gt;&#xA;  &lt;style&gt;&#xA;    * { box-sizing: border-box; }&#xA;    body {&#xA;      font-family: &#39;Segoe UI&#39;, sans-serif;&#xA;      background-color: #f2f4f8;&#xA;      padding: 30px 15px;&#xA;      margin: 0;&#xA;    }&#xA;    h2, h3 { color: #333; }&#xA;    .container {&#xA;      max-width: 600px;&#xA;      margin: auto;&#xA;      background: white;&#xA;      padding: 25px;&#xA;      border-radius: 10px;&#xA;      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);&#xA;    }&#xA;    label { font-weight: 600; margin-top: 10px; display: block; }&#xA;    select, textarea, button {&#xA;      width: 100%;&#xA;      padding: 10px;&#xA;      margin-top: 10px;&#xA;      font-size: 16px;&#xA;      border-radius: 6px;&#xA;      border: 1px solid #ccc;&#xA;    }&#xA;    select:focus, textarea:focus {&#xA;      border-color: #1a73e8;&#xA;      outline: none;&#xA;    }&#xA;    button {&#xA;      background-color: #08036a;&#xA;      color: white;&#xA;      font-weight: bold;&#xA;      cursor: pointer;&#xA;      transition: background 0.3s;&#xA;    }&#xA;    button:hover { opacity: 0.8; }&#xA;    .delbtn { width:20px; }&#xA;    .entry {&#xA;      background-color: #f9f9f9;&#xA;      padding: 15px;&#xA;      border-radius: 8px;&#xA;      margin-top: 15px;&#xA;      position: relative;&#xA;      border-left: 4px solid #1a73e8;&#xA;    }&#xA;    .entry strong { color: #1a73e8; }&#xA;    .entry button {&#xA;      position: absolute;&#xA;      top: 10px;&#xA;      right: 10px;&#xA;      padding: 4px 10px;&#xA;      background: #e53935;&#xA;      border: none;&#xA;      border-radius: 4px;&#xA;      font-size: 12px;&#xA;      cursor: pointer;&#xA;    }&#xA;    .button-row {&#xA;      display: flex;&#xA;      gap: 10px;&#xA;      margin-top: 10px;&#xA;    }&#xA;    .button-row button {&#xA;      padding: 6px 12px;&#xA;      font-size: 14px;&#xA;      border-radius: 6px;&#xA;      border: none;&#xA;      background-color: red;&#xA;      color: white;&#xA;      cursor: pointer;&#xA;      transition: background-color 0.2s ease;&#xA;    }&#xA;    .button-row button:nth-child(2) { background-color: green; }&#xA;    .output-box {&#xA;      background: #f1f1f1;&#xA;      padding: 15px;&#xA;      margin-top: 15px;&#xA;      border-radius: 8px;&#xA;      white-space: pre-wrap;&#xA;      font-family: monospace;&#xA;      color: #333;&#xA;    }&#xA;    .hidden { display: none; }&#xA;    @media (max-width: 600px) {&#xA;      .container { padding: 20px 15px; }&#xA;    }&#xA;  &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;  &lt;div class=&#34;container&#34;&gt;&#xA;    &lt;h2&gt;YP Jobs Toml Tools&lt;/h2&gt;&#xA;&#xA;    &lt;label for=&#34;typeSelector&#34;&gt;Select Type&lt;/label&gt;&#xA;    &lt;select id=&#34;typeSelector&#34;&gt;&lt;/select&gt;&#xA;&#xA;    &lt;div id=&#34;formArea&#34; class=&#34;hidden&#34;&gt;&#xA;      &lt;label id=&#34;selectedLabel&#34;&gt;&lt;/label&gt;&#xA;      &lt;textarea id=&#34;inputText&#34; rows=&#34;4&#34; placeholder=&#34;Enter details here...&#34;&gt;&lt;/textarea&gt;&#xA;      &lt;div class=&#34;button-row&#34;&gt;&#xA;        &lt;button onclick=&#34;clearTextarea()&#34;&gt;Clear&lt;/button&gt;&#xA;        &lt;button onclick=&#34;addEntry()&#34;&gt;+Add&lt;/button&gt;&#xA;      &lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &lt;h3&gt;Added Entries&lt;/h3&gt;&#xA;    &lt;div id=&#34;entriesContainer&#34;&gt;&lt;/div&gt;&#xA;&#xA;    &lt;div class=&#34;button-row&#34;&gt;&#xA;      &lt;button onclick=&#34;deleteAllEntries()&#34;&gt;üóë Delete All&lt;/button&gt;&#xA;      &lt;button onclick=&#34;generateOutput()&#34;&gt;‚úÖ Generate&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &lt;div id=&#34;outputSection&#34; class=&#34;hidden&#34;&gt;&#xA;      &lt;h3&gt;Output&lt;/h3&gt;&#xA;      &lt;div id=&#34;outputBox&#34; class=&#34;output-box&#34;&gt;&lt;/div&gt;&#xA;      &lt;button onclick=&#34;copyOutput()&#34;&gt;Copy&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;script&gt;&#xA;    const STORAGE_KEY = &#34;yp_admission_entries&#34;;&#xA;    const typeSelector = document.getElementById(&#34;typeSelector&#34;);&#xA;    const formArea = document.getElementById(&#34;formArea&#34;);&#xA;    const selectedLabel = document.getElementById(&#34;selectedLabel&#34;);&#xA;    const inputText = document.getElementById(&#34;inputText&#34;);&#xA;    const entriesContainer = document.getElementById(&#34;entriesContainer&#34;);&#xA;    const outputBox = document.getElementById(&#34;outputBox&#34;);&#xA;    const outputSection = document.getElementById(&#34;outputSection&#34;);&#xA;&#xA;    const allOptions = [&#xA;     &#34;title&#34;, &#34;type&#34;, &#34;post_type&#34;, &#34;recruitment&#34;,  &#34;PostName&#34;, &#34;totalPost&#34;, &#34;seo_title&#34;, &#34;Department&#34;, &#34;OfficialSource&#34;, &#34;description&#34;, &#34;State&#34;, &#34;category&#34;, &#34;Notification&#34;,  &#34;begindate&#34;, &#34;lastdate&#34;, &#34;eligibility&#34;, &#34;Domicile&#34;,  &#34;summary&#34;, &#34;impdates&#34;,&#34;applyfees&#34;, &#34;qualification&#34;, &#34;how_to&#34;, &#34;documents&#34;, &#34;keywords&#34;, &#34;age_limit&#34;, &#34;shortinfo&#34;, &#34;InnerPost&#34;,  &#34;from_date&#34;, &#34;to_date&#34;,  &#34;notificationdate&#34;, &#34;candidates&#34;, &#34;imageBanner&#34;, &#34;cssStyles&#34;, &#34;faqs&#34;, &#34;admitcardName&#34;, &#34;ResultName&#34;, &#34;pdfName&#34; &#xA;    ];&#xA;&#xA;    const defaultTexts = {&#xA;      type: &#34;Recruitment&#34;,&#xA;      post_type: &#34;latest-jobs&#34;,&#xA;      Recruitment: &#34;Recruitment 2025&#34;,&#xA;      category: &#34;Recruitemnt&#34;,&#xA;      candidates: &#34;Male &amp; Female&#34;,&#xA;      OfficialSource: &#34;https://yojnaportal.com/&#34;,&#xA;      cssStyles: &#34;css/posts/admission.css&#34;,&#xA;      InnerPost: &#34; ‡§Ü‡§µ‡§¶‡•á‡§® ‡•§ ‡§§‡§ø‡§•‡§ø‡§Ø‡§æ | ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡•§ ‡§Æ‡§π‡§§‡•ç‡§§‡§™‡•Ç‡§∞‡•ç‡§£ ‡§≤‡§ø‡§Ç‡§ï&#34;,&#xA;      how_to: `‡§Ü‡§ß‡§ø‡§ï‡§æ‡§∞‡§ø‡§ï ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç:&#xA;      ‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂ ‡§™‡§¢‡•á:&#xA;      Candidate Online Form ‡§∏‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§è‡§Ç :&#xA;      ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§® ‡§ï‡§∞‡•á‡§Ç:&#xA;      ‡§Ü‡§µ‡•á‡§¶‡§® ‡§´‡•â‡§∞‡•ç‡§Æ ‡§≠‡§∞‡•á‡§Ç:&#xA;      ‡§´‡•Ä‡§∏ ‡§ï‡§æ ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç:&#xA;      ‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡§§‡•ç‡§∞ ‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§ï‡§∞‡•á‡§Ç:` ,&#xA;     documents: `‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§£‡§ø‡§ï ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ&#xA;     ‡§Ü‡§Ø‡•Å ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§É 10‡§µ‡•Ä‡§Ç ‡§Ö‡§ï‡§∏‡•Ç‡§ö‡•Ä&#xA;     ‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°&#xA;     ‡§´‡•ã‡§ü‡•ã ‡§è‡§µ‡§Ç ‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞&#xA;     ‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§Ü‡§à ‡§°‡•Ä&#xA;     ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§è‡§µ‡§Ç ‡§à‡§Æ‡•á‡§≤ ‡§Ü‡§à ‡§°‡•Ä&#xA;     ‡§´‡•ã‡§ü‡•ã ‡§è‡§µ‡§Ç ‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞`,&#xA;       age_limit: `&#xA;       ‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§Ü‡§Ø‡•Å‡§É&#xA;       ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§Ü‡§Ø‡•Å‡§É`&#xA;    };&#xA;&#xA;    let entries = [];&#xA;&#xA;    window.onload = () =&gt; {&#xA;      loadEntriesFromStorage();&#xA;      populateDropdown();&#xA;    };&#xA;&#xA;    function populateDropdown() {&#xA;      typeSelector.innerHTML = &#34;&#34;;&#xA;      const available = allOptions.filter(opt =&gt; !entries.find(e =&gt; e.type === opt));&#xA;      available.forEach(opt =&gt; {&#xA;        const option = document.createElement(&#34;option&#34;);&#xA;        option.value = opt;&#xA;        option.textContent = opt;&#xA;        typeSelector.appendChild(option);&#xA;      });&#xA;      if (available.length &gt; 0) {&#xA;        typeSelector.selectedIndex = 0;&#xA;        showForm();&#xA;      } else {&#xA;        formArea.classList.add(&#34;hidden&#34;);&#xA;      }&#xA;    }&#xA;&#xA;    function showForm() {&#xA;      const selected = typeSelector.value;&#xA;      selectedLabel.textContent = &#34;Selected: &#34; + selected;&#xA;      inputText.value = defaultTexts[selected] || &#34;&#34;;&#xA;      formArea.classList.remove(&#34;hidden&#34;);&#xA;    }&#xA;&#xA;    typeSelector.addEventListener(&#34;change&#34;, showForm);&#xA;&#xA;    function addEntry() {&#xA;      const type = typeSelector.value;&#xA;      const text = inputText.value.trim();&#xA;      if (!text) return alert(&#34;Please enter some text.&#34;);&#xA;      if (!type) return alert(&#34;Please select a type.&#34;);&#xA;      entries.push({ type, text });&#xA;      saveEntriesToStorage();&#xA;&#xA;      const entryDiv = document.createElement(&#34;div&#34;);&#xA;      entryDiv.className = &#34;entry&#34;;&#xA;      entryDiv.innerHTML = `&#xA;        &lt;strong&gt;${type}&lt;/strong&gt; = &#34;${text}&#34;&#xA;        &lt;button class=&#34;delbtn&#34; onclick=&#34;deleteEntry(this, &#39;${type}&#39;)&#34;&gt;X&lt;/button&gt;&#xA;      `;&#xA;      entriesContainer.appendChild(entryDiv);&#xA;      populateDropdown();&#xA;    }&#xA;&#xA;    function deleteEntry(btn, type) {&#xA;      entries = entries.filter(e =&gt; e.type !== type);&#xA;      saveEntriesToStorage();&#xA;      btn.parentElement.remove();&#xA;      populateDropdown();&#xA;    }&#xA;&#xA;    function deleteAllEntries() {&#xA;      if (confirm(&#34;Are you sure you want to delete all entries?&#34;)) {&#xA;        entries = [];&#xA;        localStorage.removeItem(STORAGE_KEY);&#xA;        entriesContainer.innerHTML = &#34;&#34;;&#xA;        populateDropdown();&#xA;        outputSection.classList.add(&#34;hidden&#34;);&#xA;      }&#xA;    }&#xA;&#xA;    function generateOutput() {&#xA;      if (entries.length === 0) return alert(&#34;No entries added.&#34;);&#xA;      const forceArrayTypes = [&#34;impdates&#34;, &#34;cssstyles&#34;, &#34;age_limit&#34;, &#34;importantdates&#34;, &#34;applyfees&#34;, &#34;qualification&#34;, &#34;keywords&#34;, &#34;how_to&#34;, &#34;faqs&#34;, &#34;documents&#34;, &#34;shortinfo&#34;];&#xA;      let result = entries.map(entry =&gt; {&#xA;        const { type, text } = entry;&#xA;        const typeKey = type.toLowerCase();&#xA;        const isForceArray = forceArrayTypes.includes(typeKey);&#xA;        const isMultiLine = isForceArray || text.includes(&#34;\n&#34;) || text.trim() === &#34;///&#34;;&#xA;        if (isMultiLine) {&#xA;          const lines = text&#xA;            .split(&#34;\n&#34;)&#xA;            .map(line =&gt; line.trim())&#xA;            .filter(line =&gt; line !== &#34;&#34;)&#xA;            .map(line =&gt; `&#34;${line}&#34;`);&#xA;          return `${type} = [\n  ${lines.join(&#34;,\n  &#34;)}\n]`;&#xA;        } else {&#xA;          return `${type} = &#34;${text}&#34;`;&#xA;        }&#xA;      }).join(&#34;\n\n&#34;);&#xA;      outputBox.textContent = result;&#xA;      outputSection.classList.remove(&#34;hidden&#34;);&#xA;    }&#xA;&#xA;    function copyOutput() {&#xA;      navigator.clipboard.writeText(outputBox.textContent).then(() =&gt; {&#xA;        alert(&#34;Copied to clipboard!&#34;);&#xA;      });&#xA;    }&#xA;&#xA;    function clearTextarea() {&#xA;      inputText.value = &#34;&#34;;&#xA;    }&#xA;&#xA;    function saveEntriesToStorage() {&#xA;      localStorage.setItem(STORAGE_KEY, JSON.stringify(entries));&#xA;    }&#xA;&#xA;    function loadEntriesFromStorage() {&#xA;      const saved = localStorage.getItem(STORAGE_KEY);&#xA;      if (saved) {&#xA;        entries = JSON.parse(saved);&#xA;        entries.forEach(({ type, text }) =&gt; {&#xA;          const entryDiv = document.createElement(&#34;div&#34;);&#xA;          entryDiv.className = &#34;entry&#34;;&#xA;          entryDiv.innerHTML = `&#xA;            &lt;strong&gt;${type}&lt;/strong&gt; = &#34;${text}&#34;&#xA;            &lt;button class=&#34;delbtn&#34; onclick=&#34;deleteEntry(this, &#39;${type}&#39;)&#34;&gt;X&lt;/button&gt;&#xA;          `;&#xA;          entriesContainer.appendChild(entryDiv);&#xA;        });&#xA;      }&#xA;    }&#xA;  &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
  </channel>
</rss>
